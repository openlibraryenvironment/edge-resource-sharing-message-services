// Springboot plugin builds a single jar from code and all deps

buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE'
    classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2'
    classpath "com.netflix.nebula:gradle-ospackage-plugin:5.3.0"
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.palantir.docker'
apply plugin: "nebula.deb"

repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url 'http://nexus.k-int.com/content/repositories/releases'
    }
}

dependencies {

  compile group: 'log4j', name: 'log4j', version: '1.2.5'
  compile group: 'com.k_int', name: 'A2J', version: '1.0.2'
  compile group: 'com.k_int', name: 'iso10161', version: '1.0.1'
  compile group: 'org.codehaus.groovy', name:'groovy-all', version:'2.4.10'
  compile group: 'org.springframework.boot', name:'spring-boot-starter', version: '2.1.3.RELEASE'
  compile group: 'org.springframework.boot', name:'spring-boot-starter-amqp', version: '2.1.3.RELEASE'

  testCompile 'junit:junit:4.12'
  testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
  testCompile 'org.springframework.boot:spring-boot-starter-test:1.5.10.RELEASE'
}


group = 'org.olf'
sourceCompatibility = 1.8
version = '1.0.1'

jar {
    manifest {
        attributes   'Implementation-Title': 'Resource Sharing Message Services', 
                   'Implementation-Version': version,
                               'Main-Class': 'com.k_int.rs.server.RSServer'
    }
    baseName = 'ki-rsms'
    // version =  '0.1.0'
}


// See https://docs.gradle.org/current/userguide/maven_plugin.html#uploading_to_maven_repositories
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://nexus.k-int.com/content/repositories/releases/") {
                def usr = project.hasProperty('knowintNexusUser') ? knowintNexusUser :''
                def pass = project.hasProperty('knowintNexusPass') ? knowintNexusPass :''
                authentication(userName: usr, password: pass)
            }
        }
    }
}


test {
    systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}


/**
 * Generic support for building docker images for SpringBoot Apps
 */
docker {
  // name 'hub.docker.com/knowint/resource-sharing-message-services:latest'
  name 'knowint/resource-sharing-message-services:latest'
  files jar.archivePath
  buildArgs(['JAR_FILE':"${jar.archiveName}"])
  dockerfile project.file('src/main/docker/Dockerfile')
} 

/**
 * https://guides.gradle.org/testing-gradle-plugins/
 */
sourceSets {
    integrationTest {
        groovy.srcDir file('src/integration-test/groovy')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}


task buildDeb(type: Deb) {

  dependsOn 'build'

  packageName = 'rs-message-service'
  version = '1.0.1'
  release = 1

  preInstall file('src/main/deb/pkg/rs-message-service.preinst')
  postInstall file('src/main/deb/pkg/rs-message-service.postinst')
  preUninstall file('src/main/deb/pkg/rs-message-service.prerm')
  postUninstall file('src/main/deb/pkg/rs-message-service.postrm')

  requires('openjdk-8-jdk')
  requires('openjdk-8-jre')
  requires('rabbitmq-server')

  into '/opt/rs-message-service'

  from(jar.outputs.files) {
    into 'lib'
  }
  from('lib') {
    into 'lib'
  }
  // Copy system service config file
  from('src/main/deb/service') {
    into '/lib/systemd/system'
  }
  from('src/main/deb/scripts') {
    fileMode = 0550
    into 'bin'
  }
  from('src/main/deb/default') {
    into '/etc/default'
  }
  from('config') {
    into 'config'
  }

  // link('/etc/init.d/foo', '/lib/systemd/system/okapi.service')
}

check.dependsOn integrationTest
